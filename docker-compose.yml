version: '3.8'

services:
  # PostgreSQL データベース
  postgres:
    image: postgres:15-alpine
    container_name: metasleuth-postgres
    environment:
      POSTGRES_USER: metasleuth
      POSTGRES_PASSWORD: metasleuth_password
      POSTGRES_DB: metasleuth_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U metasleuth"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - metasleuth-network

  # Neo4j グラフデータベース
  neo4j:
    image: neo4j:5.15-community
    container_name: metasleuth-neo4j
    environment:
      NEO4J_AUTH: neo4j/neo4j_password
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null -q http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - metasleuth-network

  # Redis キャッシュ
  redis:
    image: redis:7-alpine
    container_name: metasleuth-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - metasleuth-network

  # FastAPI バックエンド
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: metasleuth-backend
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://metasleuth:metasleuth_password@postgres:5432/metasleuth_db
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY=dev-secret-key-change-in-production
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/tmp/metasleuth/uploads
      - backend_reports:/tmp/metasleuth/reports
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - metasleuth-network

  # Next.js フロントエンド
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: metasleuth-frontend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev
    networks:
      - metasleuth-network

  # Celery ワーカー（非同期タスク処理）
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: metasleuth-celery-worker
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://metasleuth:metasleuth_password@postgres:5432/metasleuth_db
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_reports:/tmp/metasleuth/reports
    depends_on:
      - redis
      - postgres
      - neo4j
    command: celery -A app.celery_app worker --loglevel=info
    networks:
      - metasleuth-network

  # Flower（Celery監視ツール）
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: metasleuth-flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    command: celery -A app.celery_app flower --port=5555
    networks:
      - metasleuth-network

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_reports:
    driver: local

networks:
  metasleuth-network:
    driver: bridge
